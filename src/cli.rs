use crate::ollama_utils::{parse_ollama_response, validate_environment};
use crate::persistent::*;
use anyhow::Result;
use clap::{Arg, Command};
use std::path::PathBuf;
use tracing::{error, info};

pub fn cli() -> Command {
    Command::new("enhanced-rag-generator")
        .about(
            "Enhanced RAG Article Generator - AI-powered article generation with advanced caching",
        )
        .version("2.0.0")
        .arg(
            Arg::new("query")
                .help("–ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏")
                .required(true)
                .index(1),
        )
        .arg(
            Arg::new("searx-host")
                .long("searx-host")
                .help("–ê–¥—Ä–µ—Å SearXNG —Å–µ—Ä–≤–µ—Ä–∞")
                .default_value("http://127.0.0.1:8080"),
        )
        .arg(
            Arg::new("ollama-host")
                .long("ollama-host")
                .help("–ê–¥—Ä–µ—Å Ollama —Å–µ—Ä–≤–µ—Ä–∞")
                .default_value("http://localhost:11434"),
        )
        .arg(
            Arg::new("model")
                .long("model")
                .short('m')
                .help("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
                .default_value("qwen3:30b"),
        )
        .arg(
            Arg::new("embedding-model")
                .long("embedding-model")
                .help("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embeddings")
                .default_value("nomic-embed-text:latest"),
        )
        .arg(
            Arg::new("max-docs")
                .long("max-docs")
                .help("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
                .default_value("15")
                .value_parser(clap::value_parser!(usize)),
        )
        .arg(
            Arg::new("output")
                .long("output")
                .short('o')
                .help("–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                .default_value("enhanced_article.md"),
        )
        .arg(
            Arg::new("database")
                .long("database")
                .short('d')
                .help("–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                .value_parser(clap::value_parser!(PathBuf)),
        )
        .arg(
            Arg::new("cache-days")
                .long("cache-days")
                .help("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ (–¥–Ω–∏)")
                .default_value("7")
                .value_parser(clap::value_parser!(i64)),
        )
        .arg(
            Arg::new("similarity-threshold")
                .long("similarity-threshold")
                .help("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (0.0-1.0)")
                .default_value("0.7")
                .value_parser(clap::value_parser!(f32)),
        )
        .arg(
            Arg::new("quality-threshold")
                .long("quality-threshold")
                .help("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (0.0-1.0)")
                .default_value("0.3")
                .value_parser(clap::value_parser!(f32)),
        )
        .arg(
            Arg::new("enable-semantic")
                .long("enable-semantic")
                .help("–í–∫–ª—é—á–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å embeddings")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("enable-personalization")
                .long("enable-personalization")
                .help("–í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("show-cache-stats")
                .long("show-cache-stats")
                .help("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("show-quality-stats")
                .long("show-quality-stats")
                .help("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("cleanup-cache")
                .long("cleanup-cache")
                .help("–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("expertise-level")
                .long("expertise-level")
                .help("–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                .value_parser(["beginner", "intermediate", "advanced", "expert"])
                .default_value("intermediate"),
        )
        .arg(
            Arg::new("validate-env")
                .long("validate-env")
                .help("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("auto-install")
                .long("auto-install")
                .help("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç")
                .action(clap::ArgAction::SetTrue),
        )
}

pub async fn run_cli() -> Result<()> {
    let matches = cli().get_matches();

    let query = matches.get_one::<String>("query").unwrap();
    let searx_host = matches.get_one::<String>("searx-host").unwrap().clone();
    let ollama_host = matches.get_one::<String>("ollama-host").unwrap().clone();
    let model = matches.get_one::<String>("model").unwrap().clone();
    let embedding_model = matches
        .get_one::<String>("embedding-model")
        .unwrap()
        .clone();
    let max_docs = *matches.get_one::<usize>("max-docs").unwrap();
    let output = matches.get_one::<String>("output").unwrap();

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let database_path = matches.get_one::<PathBuf>("database");
    let cache_days = *matches.get_one::<i64>("cache-days").unwrap();
    let similarity_threshold = *matches.get_one::<f32>("similarity-threshold").unwrap();
    let quality_threshold = *matches.get_one::<f32>("quality-threshold").unwrap();
    let enable_semantic = matches.get_flag("enable-semantic");
    let enable_personalization = matches.get_flag("enable-personalization");
    let show_stats = matches.get_flag("show-cache-stats");
    let show_quality_stats = matches.get_flag("show-quality-stats");
    let cleanup_cache = matches.get_flag("cleanup-cache");
    let validate_env = matches.get_flag("validate-env");
    let auto_install = matches.get_flag("auto-install");
    let expertise_level = matches.get_one::<String>("expertise-level").unwrap();

    info!("üöÄ Enhanced RAG Article Generator v2.0 - AI-Powered Edition");
    info!("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:");
    info!("  üìù –ó–∞–ø—Ä–æ—Å: {}", query);
    info!("  üîç SearXNG: {}", searx_host);
    info!("  ü§ñ Ollama: {}", ollama_host);
    info!("  üß† LLM –º–æ–¥–µ–ª—å: {}", model);
    info!("  üéØ Embedding –º–æ–¥–µ–ª—å: {}", embedding_model);
    info!("  üìä –ú–∞–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}", max_docs);
    info!("  üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {}", output);

    if let Some(db_path) = database_path {
        info!("  üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {:?}", db_path);
        info!("  ‚è∞ –°—Ä–æ–∫ –∫–µ—à–∞: {} –¥–Ω–µ–π", cache_days);
        info!("  üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞: {:.2}", similarity_threshold);
        info!("  ‚≠ê –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {:.2}", quality_threshold);
        info!(
            "  üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {}",
            if enable_semantic {
                "–≤–∫–ª—é—á–µ–Ω"
            } else {
                "–æ—Ç–∫–ª—é—á–µ–Ω"
            }
        );
        info!(
            "  üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {}",
            if enable_personalization {
                "–≤–∫–ª—é—á–µ–Ω–∞"
            } else {
                "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            }
        );
        info!("  üéì –£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: {}", expertise_level);
    } else {
        info!("  üí≠ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)");
    }

    // –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
    if validate_env || auto_install {
        println!("\n{}", "=".repeat(60));
        println!("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø");
        println!("{}", "=".repeat(60));

        match validate_environment(&model, &ollama_host).await {
            Ok(()) => {
                info!("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ");
            }
            Err(e) => {
                if auto_install && e.to_string().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞") {
                    println!("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏...");

                    match crate::ollama_utils::auto_install_model(&model).await {
                        Ok(()) => {
                            info!("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω–æ–≤–æ...");
                            validate_environment(&model, &ollama_host).await?;
                        }
                        Err(install_error) => {
                            error!(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å: {}",
                                install_error
                            );
                            return Err(e);
                        }
                    }
                } else {
                    error!("‚ùå {}", e);
                    return Err(e);
                }
            }
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∞
    let cache_settings = CacheSettings {
        max_document_age_days: cache_days,
        min_query_similarity: similarity_threshold,
        max_cached_docs: max_docs,
        embedding_dim: None,
        enable_semantic_search: enable_semantic,
        min_quality_score: quality_threshold,
        enable_personalization,
        auto_reindex_interval_hours: 24,
        max_vector_cache_size: 10000,
    };

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    let user_context = if enable_personalization {
        let expertise = match expertise_level.as_str() {
            "beginner" => ExpertiseLevel::Beginner,
            "intermediate" => ExpertiseLevel::Intermediate,
            "advanced" => ExpertiseLevel::Advanced,
            "expert" => ExpertiseLevel::Expert,
            _ => ExpertiseLevel::Intermediate,
        };

        Some(UserContext {
            expertise_level: expertise,
            preferred_languages: vec!["en".to_string(), "ru".to_string()],
            frequent_topics: vec![], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            interaction_history: vec![chrono::Utc::now()],
        })
    } else {
        None
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π
    let mut generator = if let Some(db_path) = database_path {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...");
        PersistentEnhancedRAG::new_with_persistent_storage(
            db_path,
            searx_host.clone(),
            model.clone(),
            embedding_model.clone(),
            Some(ollama_host.clone()),
            Some(cache_settings),
        )?
    } else {
        info!("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏ —Å AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏...");
        PersistentEnhancedRAG::new_in_memory(
            searx_host.clone(),
            model.clone(),
            embedding_model.clone(),
            Some(ollama_host.clone()),
        )?
    };

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
    if show_stats {
        let stats = generator.cache_stats().await?;
        println!("\n{}", "=".repeat(60));
        println!("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê");
        println!("{}", "=".repeat(60));
        println!("üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}", stats.total_documents);
        println!("üÜï –°–≤–µ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}", stats.fresh_documents);
        println!("üîç –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", stats.total_queries);
        println!("üíæ –†–∞–∑–º–µ—Ä –ë–î: {:.2} –ú–ë", stats.database_size_mb);

        if database_path.is_some() {
            let cache_efficiency = if stats.total_documents > 0 {
                (stats.fresh_documents as f32 / stats.total_documents as f32) * 100.0
            } else {
                0.0
            };
            println!("‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞: {:.1}%", cache_efficiency);
        }

        println!("{}", "=".repeat(60));

        if show_stats && !show_quality_stats && !cleanup_cache {
            return Ok(());
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if show_quality_stats {
        let quality_stats = generator.get_quality_stats().await?;
        println!("\n{}", "=".repeat(60));
        println!("‚≠ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ò–°–¢–û–ß–ù–ò–ö–û–í");
        println!("{}", "=".repeat(60));
        println!("üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {}", quality_stats.total_sources);
        println!(
            "üèÜ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {}",
            quality_stats.very_high_quality
        );
        println!("‚ú® –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {}", quality_stats.high_quality);
        println!("üëç –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {}", quality_stats.medium_quality);
        println!("‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {}", quality_stats.low_quality);
        println!(
            "‚ùå –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {}",
            quality_stats.very_low_quality
        );
        println!(
            "üìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {:.3}",
            quality_stats.average_quality_score
        );
        println!("{}", "=".repeat(60));

        if show_quality_stats && !cleanup_cache {
            return Ok(());
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    if cleanup_cache {
        println!("\nüßπ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...");
        let cleanup_stats = generator.cleanup_cache().await?;
        println!("‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}", cleanup_stats.deleted_documents);
        println!("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", cleanup_stats.deleted_queries);

        if cleanup_cache && !show_stats && !show_quality_stats {
            return Ok(());
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    println!("\n{}", "=".repeat(80));
    println!("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø AI-ENHANCED –°–¢–ê–¢–¨–ò");
    println!("{}", "=".repeat(80));

    let start_time = std::time::Instant::now();

    match generator
        .generate_article_with_enhanced_cache(query, max_docs, user_context)
        .await
    {
        Ok(article) => {
            let generation_time = start_time.elapsed();

            println!("\n{}", "=".repeat(80));
            println!("‚ú® –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø AI-ENHANCED –°–¢–ê–¢–¨–Ø");
            println!("{}", "=".repeat(80));
            println!("\n{}", article);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            tokio::fs::write(output, &article).await?;

            println!("\n{}", "=".repeat(60));
            println!("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò");
            println!("{}", "=".repeat(60));
            println!(
                "‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {:.2} —Å–µ–∫—É–Ω–¥",
                generation_time.as_secs_f32()
            );
            println!("üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {} —Å–∏–º–≤–æ–ª–æ–≤", article.len());
            println!("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {}", output);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if database_path.is_some() {
                let final_stats = generator.cache_stats().await?;
                println!("\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê:");
                println!(
                    "  üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {} (—Å–≤–µ–∂–∏—Ö: {})",
                    final_stats.total_documents, final_stats.fresh_documents
                );
                println!("  üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {}", final_stats.total_queries);
                println!("  üíæ –†–∞–∑–º–µ—Ä –ë–î: {:.2} –ú–ë", final_stats.database_size_mb);

                let quality_stats = generator.get_quality_stats().await?;
                if quality_stats.total_sources > 0 {
                    println!(
                        "  ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {:.3}",
                        quality_stats.average_quality_score
                    );
                }
            }

            Ok(())
        }
        Err(e) => {
            let generation_time = start_time.elapsed();

            error!(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ (—á–µ—Ä–µ–∑ {:.2}—Å): {}",
                generation_time.as_secs_f32(),
                e
            );

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            let mut source = e.source();
            let mut error_chain = 1;
            while let Some(err) = source {
                error!("  üìç –ü—Ä–∏—á–∏–Ω–∞ {}: {}", error_chain, err);
                source = err.source();
                error_chain += 1;
            }

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            error!("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:");
            error!("  üåê SearXNG –¥–æ—Å—Ç—É–ø–µ–Ω: {}", searx_host);
            error!("  ü§ñ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {}", ollama_host);
            error!("  üß† –ú–æ–¥–µ–ª—å: {}", model);

            if let Some(db_path) = database_path {
                error!("  üóÑÔ∏è –ü—É—Ç—å –∫ –ë–î: {:?}", db_path);
            }

            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            error!("üí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:");
            if e.to_string().contains("not found") {
                error!("  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull {}", model);
                error!("  ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --model");
            }
            if e.to_string().contains("connection") || e.to_string().contains("network") {
                error!("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: ollama serve");
                error!("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å Ollama: {}", ollama_host);
            }
            error!("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --validate-env –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏");
            error!("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --auto-install –¥–ª—è –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏");

            Err(e)
        }
    }
}

use anyhow::Result;
use serde::Deserialize;
use reqwest;
use tracing::{info, warn, error};

/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Ollama API
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã: —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ—à–∏–±–∫–∏, —á–∞—Ç-—Ñ–æ—Ä–º–∞—Ç
#[derive(Debug, Deserialize)]
pub struct OllamaResponse {
    // –ü–æ–ª—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    pub model: Option<String>,
    pub created_at: Option<String>,
    pub response: Option<String>,        // /api/generate
    pub message: Option<ChatMessage>,    // /api/chat
    pub done: Option<bool>,
    
    // –ü–æ–ª–µ –¥–ª—è –æ—à–∏–±–æ–∫
    pub error: Option<String>,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub total_duration: Option<u64>,
    pub load_duration: Option<u64>,
    pub prompt_eval_count: Option<i32>,
    pub prompt_eval_duration: Option<u64>,
    pub eval_count: Option<i32>,
    pub eval_duration: Option<u64>,
}

#[derive(Debug, Deserialize)]
pub struct ChatMessage {
    pub role: String,
    pub content: String,
}

#[derive(Debug, Deserialize)]
pub struct OllamaTagsResponse {
    pub models: Vec<ModelInfo>,
}

#[derive(Debug, Deserialize)]
pub struct ModelInfo {
    pub name: String,
    pub modified_at: String,
    pub size: u64,
}

impl OllamaResponse {
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    pub fn get_error(&self) -> Option<&str> {
        self.error.as_deref()
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    pub fn get_content(&self) -> Result<String, String> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if let Some(error) = &self.error {
            return Err(error.clone());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç /api/generate
        if let Some(response) = &self.response {
            return Ok(response.clone());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç /api/chat
        if let Some(message) = &self.message {
            return Ok(message.content.clone());
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        Err("No content found in Ollama response".to_string())
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    pub fn is_done(&self) -> bool {
        self.done.unwrap_or(false)
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn get_performance_info(&self) -> Option<String> {
        if let (Some(total), Some(eval_count)) = (self.total_duration, self.eval_count) {
            let total_seconds = total as f64 / 1_000_000_000.0;
            let tokens_per_second = eval_count as f64 / total_seconds;
            Some(format!(
                "Generated {} tokens in {:.2}s ({:.1} tokens/s)",
                eval_count, total_seconds, tokens_per_second
            ))
        } else {
            None
        }
    }
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ Ollama
pub async fn check_model_availability(model_name: &str, ollama_host: &str) -> Result<bool> {
    let url = format!("{}/api/tags", ollama_host);
    
    match reqwest::get(&url).await {
        Ok(response) => {
            let tags: OllamaTagsResponse = response.json().await?;
            Ok(tags.models.iter().any(|model| model.name == model_name))
        },
        Err(e) => {
            error!("Failed to check available models: {}", e);
            Ok(false)
        }
    }
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
pub async fn get_available_models(ollama_host: &str) -> Result<Vec<String>> {
    let url = format!("{}/api/tags", ollama_host);
    
    match reqwest::get(&url).await {
        Ok(response) => {
            let tags: OllamaTagsResponse = response.json().await?;
            Ok(tags.models.into_iter().map(|model| model.name).collect())
        },
        Err(e) => {
            error!("Failed to get available models: {}", e);
            Ok(Vec::new())
        }
    }
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä–∞
pub async fn check_ollama_health(ollama_host: &str) -> Result<bool> {
    let health_url = format!("{}/api/tags", ollama_host);
    
    match reqwest::get(&health_url).await {
        Ok(response) => Ok(response.status().is_success()),
        Err(_) => Ok(false),
    }
}

/// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
pub async fn validate_environment(model_name: &str, ollama_host: &str) -> Result<()> {
    info!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    if !check_ollama_health(ollama_host).await? {
        return Err(anyhow::anyhow!(
            "‚ùå Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {}\n\
            –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: `ollama serve`", 
            ollama_host
        ));
    }
    info!("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    if check_model_availability(model_name, ollama_host).await? {
        info!("‚úÖ –ú–æ–¥–µ–ª—å '{}' –¥–æ—Å—Ç—É–ø–Ω–∞", model_name);
    } else {
        let available = get_available_models(ollama_host).await?;
        if available.is_empty() {
            return Err(anyhow::anyhow!(
                "‚ùå –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π: ollama pull {}", 
                model_name
            ));
        } else {
            return Err(anyhow::anyhow!(
                "‚ùå –ú–æ–¥–µ–ª—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n  ‚Ä¢ {}\n\n\
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å: ollama pull {}",
                model_name, 
                available.join("\n  ‚Ä¢ "), 
                model_name
            ));
        }
    }
    
    Ok(())
}

/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
pub async fn auto_install_model(model_name: &str) -> Result<()> {
    info!("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ {}...", model_name);
    
    let output = tokio::process::Command::new("ollama")
        .args(["pull", model_name])
        .output()
        .await?;
    
    if output.status.success() {
        info!("‚úÖ –ú–æ–¥–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", model_name);
        Ok(())
    } else {
        let error = String::from_utf8_lossy(&output.stderr);
        Err(anyhow::anyhow!("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {}", error))
    }
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å fallback –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏
pub async fn generate_with_fallback<F, Fut>(
    prompt: &str, 
    primary_model: &str,
    ollama_host: &str,
    generate_fn: F
) -> Result<String> 
where
    F: Fn(&str, &str) -> Fut,
    Fut: std::future::Future<Output = Result<String>>,
{
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
    match generate_fn(prompt, primary_model).await {
        Ok(response) => Ok(response),
        Err(e) if e.to_string().contains("not found") => {
            warn!("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏", primary_model);
            
            // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è fallback
            let fallback_models = [
                "llama3.2:3b", 
                "llama3.1:8b", 
                "qwen2.5:7b",
                "phi3:mini",
                "gemma2:2b"
            ];
            
            for model in &fallback_models {
                if check_model_availability(model, ollama_host).await? {
                    match generate_fn(prompt, model).await {
                        Ok(response) => {
                            info!("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {}", model);
                            return Ok(response);
                        },
                        Err(e) => {
                            warn!("–†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {}", model, e);
                            continue;
                        }
                    }
                }
            }
            
            Err(anyhow::anyhow!(
                "‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.\n\
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π: ollama pull llama3.2:3b"
            ))
        },
        Err(e) => Err(e),
    }
}

/// –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç Ollama —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
pub fn parse_ollama_response(response_text: &str) -> Result<String> {
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    info!("Raw Ollama response: {}", response_text);
    
    // –ü–∞—Ä—Å–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let ollama_response: OllamaResponse = serde_json::from_str(response_text)
        .map_err(|e| anyhow::anyhow!("Failed to parse Ollama response: {}", e))?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    match ollama_response.get_content() {
        Ok(content) => {
            info!("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if let Some(perf_info) = ollama_response.get_performance_info() {
                info!("üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}", perf_info);
            }
            
            Ok(content)
        },
        Err(error_msg) => {
            error!("‚ùå Ollama API error: {}", error_msg);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if error_msg.contains("not found") {
                return Err(anyhow::anyhow!(
                    "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å: `ollama pull <model_name>`"
                ));
            } else if error_msg.contains("not loaded") {
                return Err(anyhow::anyhow!(
                    "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama"
                ));
            } else if error_msg.contains("connection") || error_msg.contains("network") {
                return Err(anyhow::anyhow!(
                    "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
                ));
            } else {
                return Err(anyhow::anyhow!("Ollama error: {}", error_msg));
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse_success_response() {
        let json = r#"{"model":"test","response":"Hello world","done":true}"#;
        let response: OllamaResponse = serde_json::from_str(json).unwrap();
        assert_eq!(response.get_content().unwrap(), "Hello world");
        assert!(!response.has_error());
    }

    #[test] 
    fn test_parse_error_response() {
        let json = r#"{"error":"model not found"}"#;
        let response: OllamaResponse = serde_json::from_str(json).unwrap();
        assert!(response.has_error());
        assert_eq!(response.get_error().unwrap(), "model not found");
    }

    #[test]
    fn test_parse_chat_response() {
        let json = r#"{"model":"test","message":{"role":"assistant","content":"Hello"},"done":true}"#;
        let response: OllamaResponse = serde_json::from_str(json).unwrap();
        assert_eq!(response.get_content().unwrap(), "Hello");
    }
}